 FAIL  shared/__tests__/events-system.test.ts (15.398 s)
  Events System
    Event Management
      ✓ should add events and notify subscribers (3 ms)
      ✓ should prevent duplicate events with same ID
      ✓ should clear all events (1 ms)
    Subscriber Pattern
      ✓ should handle multiple subscribers (1 ms)
      ✓ should stop notifying unsubscribed callbacks (1 ms)
    Room Change Events
      ✓ should handle room entry without stored direction (1 ms)
      ✕ should handle room entry with stored direction (2 ms)
      ✕ should not generate duplicate events for same room
      ✕ should generate discovery events after room entry delay (1 ms)
    Combat Events
      ✕ should record combat actions with move type (2 ms)
      ✕ should record combat actions with attack type (1 ms)
      ✕ should record combat actions without target
      ✓ should handle combat start events
      ✓ should handle combat damage events
      ✓ should handle combat end events
    Death Events
      ✓ should handle mob death events (4 ms)
      ✓ should handle crawler death with killer
      ✓ should handle crawler death without killer (1 ms)
      ✓ should handle NPC death events (1 ms)
    Room Entry Time Tracking
      ✓ should track room entry time
      ✓ should update room entry time on room change
    Event Properties
      ✓ should create events with all required properties (1 ms)
      ✓ should handle events with minimal properties

  ● Events System › Room Change Events › should handle room entry with stored direction

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      257 |       eventsSystem.onRoomChange(roomId, crawlerName, crawlerId);
      258 |
    > 259 |       expect(receivedEvents).toHaveLength(1);
          |                              ^
      260 |       expect(receivedEvents[0].message).toBe(`Crawler ${crawlerName} (#${crawlerId}) entered from the south`);
      261 |       expect(receivedEvents[0].direction).toBe('north');
      262 |       expect(mockSessionStorage.setItem).toHaveBeenCalledWith('entryDirection', 'north');

      at Object.<anonymous> (shared/__tests__/events-system.test.ts:259:30)

  ● Events System › Room Change Events › should not generate duplicate events for same room

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      269 |
      270 |       eventsSystem.onRoomChange(roomId, crawlerName, crawlerId);
    > 271 |       expect(receivedEvents).toHaveLength(1);
          |                              ^
      272 |
      273 |       // Try to enter same room again
      274 |       eventsSystem.onRoomChange(roomId, crawlerName, crawlerId);

      at Object.<anonymous> (shared/__tests__/events-system.test.ts:271:30)

  ● Events System › Room Change Events › should generate discovery events after room entry delay

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      284 |
      285 |       // Initial entry event
    > 286 |       expect(receivedEvents).toHaveLength(1);
          |                              ^
      287 |
      288 |       // Wait for discovery events
      289 |       setTimeout(() => {

      at Object.<anonymous> (shared/__tests__/events-system.test.ts:286:30)

  ● Events System › Combat Events › should record combat actions with move type

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      317 |       eventsSystem.onCombatAction(action, entityId);
      318 |
    > 319 |       expect(receivedEvents).toHaveLength(1);
          |                              ^
      320 |       expect(receivedEvents[0].type).toBe('movement');
      321 |       expect(receivedEvents[0].message).toBe('Crawler Test Crawler moved to a new position');
      322 |       expect(receivedEvents[0].priority).toBe('low');

      at Object.<anonymous> (shared/__tests__/events-system.test.ts:319:30)

  ● Events System › Combat Events › should record combat actions with attack type

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      331 |       eventsSystem.onCombatAction(action, entityId, targetId, damage);
      332 |
    > 333 |       expect(receivedEvents).toHaveLength(1);
          |                              ^
      334 |       expect(receivedEvents[0].type).toBe('combat');
      335 |       expect(receivedEvents[0].message).toBe('Angry Goblin used Sword Strike on Test Crawler');
      336 |       expect(receivedEvents[0].priority).toBe('high');

      at Object.<anonymous> (shared/__tests__/events-system.test.ts:333:30)

  ● Events System › Combat Events › should record combat actions without target

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      344 |       eventsSystem.onCombatAction(action, entityId);
      345 |
    > 346 |       expect(receivedEvents).toHaveLength(1);
          |                              ^
      347 |       expect(receivedEvents[0].type).toBe('combat');
      348 |       expect(receivedEvents[0].message).toBe('Crawler Test Crawler used Heal');
      349 |       expect(receivedEvents[0].priority).toBe('medium');

      at Object.<anonymous> (shared/__tests__/events-system.test.ts:346:30)

Test Suites: 1 failed, 1 total
Tests:       6 failed, 17 passed, 23 total
Snapshots:   0 total
Time:        15.718 s
Ran all test suites matching /shared\/__tests__\/events-system.test.ts/i.
Jest did not exit one second after the test run has completed.

'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.

ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From shared/__tests__/events-system.test.ts.

      103 |       entityName: crawlerName,
      104 |       direction: (storedDirection && ["north", "south", "east", "west"].includes(storedDirection)) 
    > 105 |         ? storedDirection as "north" | "south" | "east" | "west" 
          |                                                   ^
      106 |         : undefined,
      107 |       priority: "medium",
      108 |     });
